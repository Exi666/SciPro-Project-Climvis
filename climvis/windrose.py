# -*- coding: utf-8 -*-
"""
Created on Sat Dec  1 16:10:03 2018

@author: Birgit Bacher
"""

# from bokeh.io import show, output_file
from bokeh.plotting import figure, show, output_file
from bokeh import palettes
from bokeh.models import Range1d
from math import radians
import numpy as np
import pandas as pd
# import climvis

# -----------------------------------------------------------------------------
#  sample data, delete this later on!
# -----------------------------------------------------------------------------

dd = [0, 180, 74.0, 80.0, 76.0, 77.0, 78.0, 76.0, 78.0, 82.0, 80.0, 71.0, 73.0, 64.0, 78.0, 74.0, 70.0, 84.0, 81.0, 77.0, 79.0, 81.0, 65.0, 42.0, 33.0, 43.0, 52.0, 49.0, 52.0, 66.0, 71.0, 93.0, 78.0, 72.0, 89.0, 77.0, 85.0, 80.0, 78.0, 94.0, 96.0, 55.0, 37.0, 64.0, 84.0, 66.0, 74.0, 93.0, 68.0, 49.0, 160.0, 278.0, 356.0, 66.0, 59.0, 68.0, 64.0, 84.0, 86.0, 39.0, 94.0, 108.0, 57.0, 51.0, 63.0, 307.0, 266.0, 232.0, 271.0, 7.0, 55.0, 63.0, 60.0, 71.0, 84.0, 68.0, 37.0, 183.0, 251.0, 294.0, 201.0, 198.0, 26.0, 47.0, 39.0, 50.0, 84.0, 96.0, 101.0, 79.0, 84.0, 115.0, 291.0, 238.0, 238.0, 221.0, 182.0, 193.0, 297.0, 254.0, 260.0, 271.0, 351.0, 281.0, 221.0, 288.0, 280.0, 227.0, 231.0, 250.0, 246.0, 251.0, 234.0, 246.0, 266.0, 241.0, 225.0, 257.0, 283.0, 231.0, 222.0, 276.0, 233.0, 219.0, 283.0, 225.0, 229.0, 267.0, 280.0, 206.0, 204.0, 254.0, 286.0, 235.0, 257.0, 233.0, 266.0, 250.0, 263.0, 223.0, 261.0, 255.0, 286.0, 274.0, 281.0, 233.0, 247.0, 31.0, 41.0, 55.0, 60.0, 63.0, 74.0, 77.0, 84.0, 91.0, 89.0, 87.0, 74.0, 62.0, 16.0, 58.0, 88.0, 78.0, 72.0, 76.0, 73.0, 71.0, 71.0, 76.0, 75.0, 71.0, 73.0, 81.0, 83.0, 77.0, 74.0, 73.0, 74.0, 75.0, 75.0, 70.0, 77.0, 75.0, 72.0, 70.0, 70.0, 71.0, 66.0, 67.0, 59.0, 60.0, 53.0, 61.0, 64.0, 87.0, 90.0, 101.0, 196.0, 210.0, 211.0, 201.0, 135.0, 108.0, 293.0, 293.0, 295.0, 289.0, 280.0, 276.0, 199.0, 234.0, 259.0, 268.0, 258.0, 240.0, 247.0, 233.0, 225.0, 230.0, 231.0, 222.0, 233.0, 215.0, 260.0, 245.0, 238.0, 231.0, 237.0, 234.0, 262.0, 267.0, 269.0, 256.0, 250.0, 242.0, 257.0, 242.0, 222.0, 227.0, 239.0, 238.0, 259.0, 259.0, 238.0, 252.0, 252.0, 219.0, 240.0, 255.0, 296.0, 297.0, 297.0, 298.0, 284.0, 212.0, 190.0, 210.0, 230.0, 244.0, 219.0, 218.0, 229.0, 264.0, 263.0, 254.0, 269.0, 274.0, 236.0, 221.0, 214.0, 218.0, 295.0, 255.0, 141.0, 325.0, 352.0, 360.0, 211.0, 209.0, 202.0, 220.0, 228.0, 272.0, 282.0, 329.0, 14.0, 20.0, 59.0, 61.0, 17.0, 41.0, 72.0, 85.0, 89.0, 81.0, 92.0, 73.0, 74.0, 64.0, 60.0, 76.0, 64.0, 67.0, 59.0, 47.0, 49.0, 60.0, 75.0, 59.0, 71.0, 79.0, 74.0, 74.0, 75.0, 84.0, 77.0, 71.0, 76.0, 82.0, 75.0, 73.0, 64.0, 66.0, 52.0, 64.0, 92.0, 97.0, 81.0, 76.0, 89.0, 97.0, 78.0, 76.0, 80.0, 81.0, 93.0, 88.0, 79.0, 77.0, 74.0, 73.0, 74.0, 75.0, 75.0, 65.0, 78.0, 72.0, 73.0, 67.0, 71.0, 84.0, 78.0, 72.0, 62.0, 68.0, 77.0, 75.0, 75.0, 79.0, 71.0, 71.0, 86.0, 89.0, 68.0, 55.0, 60.0, 57.0, 47.0, 71.0, 71.0, 65.0, 61.0, 51.0, 57.0, 89.0, 74.0, 75.0, 38.0, 94.0, 82.0, 35.0, 80.0, 76.0, 77.0, 82.0, 63.0, 55.0, 31.0, 73.0, 26.0, 21.0, 40.0, 46.0, 71.0, 62.0, 55.0, 55.0, 68.0, 74.0, 55.0, 20.0, 33.0, 35.0, 26.0, 46.0, 91.0, 107.0, 65.0, 32.0, 20.0, 3.0, 44.0, 37.0, 37.0, 41.0, 44.0, 84.0, 83.0, 76.0, 67.0, 25.0, 63.0, 74.0, 62.0, 65.0, 34.0, 62.0, 61.0, 89.0, 75.0, 59.0, 74.0, 37.0, 64.0, 53.0, 38.0, 66.0, 78.0, 74.0, 70.0, 66.0, 70.0, 60.0, 60.0, 67.0, 75.0, 67.0, 65.0, 46.0, 52.0, 58.0, 37.0, 91.0, 86.0, 91.0, 90.0, 87.0, 88.0, 63.0, 80.0, 80.0, 39.0, 60.0, 65.0, 82.0, 69.0, 53.0, 99.0, 88.0, 82.0, 87.0, 89.0, 61.0, 76.0, 71.0, 52.0, 53.0, 68.0, 86.0, 47.0, 41.0, 47.0, 41.0, 84.0, 70.0, 63.0, 61.0, 77.0, 78.0, 85.0, 96.0, 92.0, 92.0, 100.0, 121.0, 108.0, 97.0, 104.0, 102.0, 105.0, 105.0, 105.0, 116.0, 102.0, 115.0, 101.0, 112.0, 108.0, 106.0, 95.0, 94.0, 97.0, 77.0, 73.0, 67.0, 77.0, 90.0, 81.0, 66.0, 52.0, 47.0, 53.0, 63.0, 86.0, 80.0, 70.0, 73.0, 72.0, 76.0, 68.0, 79.0, 77.0, 75.0, 91.0, 93.0, 100.0, 106.0, 89.0, 70.0, 80.0, 65.0, 71.0, 88.0, 93.0, 129.0, 144.0, 129.0, 167.0, 122.0, 115.0, 96.0, 104.0, 105.0, 102.0, 181.0, 185.0, 200.0, 215.0, 207.0, 184.0, 139.0, 102.0, 127.0, 131.0, 203.0, 181.0, 186.0, 167.0, 122.0, 166.0, 109.0, 150.0, 71.0, 1.0, 117.0, 134.0, 159.0, 203.0, 124.0, 116.0, 107.0, 101.0, 78.0, 0.0, 179.0, 124.0, 113.0, 76.0, 6.0, 324.0, 242.0, 300.0, 214.0, 259.0, 299.0, 321.0, 30.0, 8.0, 352.0, 351.0, 221.0, 175.0, 26.0, 110.0, 100.0, 185.0, 254.0, 259.0, 262.0, 314.0, 241.0, 231.0, 270.0, 288.0, 230.0, 228.0, 233.0, 258.0, 249.0, 223.0, 236.0, 224.0, 256.0, 252.0, 278.0, 250.0, 228.0, 249.0, 242.0, 234.0, 281.0, 249.0, 243.0, 211.0, 252.0, 240.0, 232.0, 222.0, 235.0, 235.0, 285.0, 269.0, 247.0, 229.0, 231.0, 231.0, 237.0, 221.0, 224.0, 224.0, 226.0, 299.0, 289.0, 207.0, 230.0, 249.0, 276.0, 276.0, 240.0, 231.0, 280.0, 265.0, 221.0, 227.0, 282.0, 255.0, 235.0, 231.0, 234.0, 262.0, 235.0, 232.0, 275.0, 293.0, 238.0, 238.0, 256.0, 248.0, 284.0, 225.0, 222.0, 230.0, 231.0, 296.0, 293.0, 225.0, 210.0, 220.0, 254.0, 190.0, 201.0, 233.0, 309.0, 299.0, 232.0, 259.0, 253.0, 223.0, 219.0, 208.0, 206.0, 220.0, 209.0, 218.0, 242.0, 215.0, 226.0, 200.0, 206.0, 241.0, 281.0, 12.0, 29.0, 101.0, 264.0, 224.0, 231.0, 230.0, 225.0, 256.0, 237.0, 229.0, 221.0, 214.0, 225.0, 228.0, 243.0, 224.0, 276.0, 292.0, 301.0, 264.0, 215.0, 242.0, 234.0, 238.0, 260.0, 261.0, 238.0, 235.0, 270.0, 336.0, 215.0, 290.0, 217.0, 208.0, 262.0, 294.0, 260.0, 237.0, 207.0, 314.0, 305.0, 250.0, 230.0, 233.0, 254.0, 208.0, 29.0, 84.0, 25.0, 338.0, 223.0, 231.0, 229.0, 217.0, 199.0, 113.0, 124.0, 216.0, 15.0, 46.0, 73.0, 65.0, 279.0, 263.0, 251.0, 301.0, 210.0, 264.0, 217.0, 310.0, 210.0, 5.0, 276.0, 249.0, 229.0, 266.0, 214.0, 269.0, 334.0, 266.0, 250.0, 336.0, 208.0, 221.0, 262.0, 352.0, 188.0, 30.0, 69.0, 32.0, 111.0, 50.0, 82.0, 91.0, 49.0, 40.0, 236.0, 247.0, 247.0, 233.0, 227.0, 267.0, 26.0, 73.0, 65.0, 62.0, 77.0, 77.0, 65.0, 41.0, 35.0, 64.0, 79.0, 81.0, 83.0, 37.0, 31.0, 35.0, 35.0, 71.0, 62.0, 57.0, 19.0, 10.0, 21.0, 15.0, 304.0, 219.0, 265.0, 180.0, 301.0, 275.0, 213.0, 214.0, 218.0, 317.0, 330.0, 259.0, 325.0, 324.0, 346.0, 1.0, 34.0, 33.0, 40.0, 47.0, 59.0, 72.0, 82.0, 83.0, 83.0, 103.0, 74.0, 87.0, 82.0, 81.0, 92.0, 88.0, 83.0, 92.0, 87.0, 75.0, 77.0, 78.0, 80.0, 83.0, 86.0, 84.0, 94.0, 77.0, 69.0, 17.0, 9.0, 59.0, 39.0, 290.0, 275.0, 267.0, 187.0, 123.0, 36.0, 41.0, 57.0, 62.0, 43.0, 41.0, 35.0, 40.0, 68.0, 83.0, 41.0, 63.0, 68.0, 126.0, 112.0, 60.0, 29.0, 30.0, 37.0, 45.0, 78.0, 167.0, 300.0, 348.0, 36.0, 279.0, 220.0, 216.0, 213.0, 276.0, 334.0, 35.0, 55.0, 109.0, 127.0, 42.0, 358.0, 31.0, 53.0, 0.0, 0.0, 69.0, 76.0, 33.0, 35.0, 65.0, 22.0, 62.0, 145.0, 348.0, 332.0, 84.0, 38.0, 117.0, 193.0, 322.0, 62.0, 20.0, 20.0, 315.0, 301.0, 272.0, 222.0, 212.0, 219.0, 297.0, 306.0, 313.0, 33.0, 83.0, 64.0, 39.0, 36.0, 57.0, 30.0, 17.0, 37.0, 28.0, 61.0, 70.0, 41.0, 35.0, 33.0, 41.0, 52.0, 31.0, 28.0, 17.0, 23.0, 24.0, 31.0, 299.0, 309.0, 326.0, 93.0, 28.0, 31.0, 10.0, 25.0, 33.0, 114.0, 107.0, 113.0, 106.0, 101.0, 95.0, 111.0, 99.0, 68.0, 65.0, 64.0, 88.0, 104.0, 80.0, 230.0]
ff = [8, 0, 3.4, 4.0, 4.7, 4.8, 3.9, 3.9, 3.6, 3.6, 3.4, 3.1, 3.6, 2.1, 2.5, 2.5, 1.7, 2.0, 2.0, 1.8, 2.6, 3.0, 2.0, 2.0, 2.0, 2.1, 2.7, 2.3, 2.3, 2.1, 1.9, 1.9, 1.5, 1.4, 1.1, 1.3, 2.1, 2.2, 2.0, 1.4, 1.1, 0.7, 1.0, 1.1, 0.7, 0.7, 0.9, 0.9, 0.7, 0.5, 0.3, 0.3, 1.0, 0.7, 1.0, 1.4, 1.5, 1.4, 1.1, 1.3, 0.7, 0.8, 1.3, 1.7, 1.2, 1.0, 0.8, 0.6, 0.4, 0.5, 1.5, 1.6, 2.0, 1.7, 1.3, 1.0, 0.6, 0.4, 1.1, 0.6, 0.4, 0.6, 0.7, 0.8, 1.0, 1.5, 1.5, 1.7, 1.2, 1.2, 1.2, 0.5, 0.9, 0.7, 0.8, 0.4, 0.5, 0.3, 0.5, 0.4, 0.4, 0.9, 0.5, 0.3, 0.6, 0.3, 0.6, 0.4, 1.0, 1.0, 1.9, 1.7, 2.1, 1.9, 1.5, 1.3, 0.8, 0.4, 1.0, 0.8, 0.7, 1.4, 1.1, 1.4, 1.5, 1.5, 1.5, 1.8, 1.2, 0.8, 0.9, 1.1, 1.2, 1.0, 1.3, 1.2, 1.2, 1.2, 1.0, 0.9, 1.9, 1.9, 1.3, 1.2, 1.4, 0.7, 0.4, 1.0, 1.9, 1.8, 1.9, 2.1, 2.3, 2.6, 2.3, 1.9, 1.6, 2.2, 2.0, 1.1, 1.3, 1.6, 2.3, 2.6, 2.8, 2.4, 1.8, 1.5, 1.6, 2.0, 1.9, 1.9, 1.9, 2.4, 2.8, 3.6, 4.0, 3.6, 3.3, 3.6, 3.7, 2.9, 3.8, 4.0, 3.6, 4.3, 3.3, 3.0, 3.1, 3.0, 2.9, 2.5, 2.1, 1.9, 2.0, 1.3, 0.8, 1.2, 0.8, 1.2, 0.8, 1.0, 1.1, 0.8, 1.0, 1.5, 1.7, 1.5, 1.1, 1.0, 0.5, 0.9, 0.8, 1.0, 0.8, 0.8, 0.4, 0.8, 1.4, 1.2, 1.6, 1.7, 0.8, 0.6, 0.5, 0.8, 0.7, 1.8, 1.5, 1.4, 1.2, 1.7, 1.8, 2.0, 1.8, 1.7, 1.8, 1.4, 1.1, 1.3, 1.3, 1.0, 1.3, 1.5, 1.4, 0.6, 0.7, 0.5, 1.2, 1.2, 1.0, 1.4, 1.9, 1.9, 1.2, 0.5, 0.6, 1.0, 1.0, 0.9, 0.6, 0.7, 1.4, 0.8, 1.2, 1.5, 1.5, 1.1, 0.7, 0.5, 1.1, 0.6, 0.7, 0.4, 0.2, 0.3, 0.4, 0.4, 0.8, 0.4, 0.8, 1.0, 0.8, 0.6, 1.2, 0.9, 0.7, 0.8, 1.1, 0.7, 0.7, 1.9, 1.6, 2.1, 2.0, 2.6, 2.9, 2.5, 2.3, 2.7, 2.4, 2.6, 2.3, 2.3, 2.1, 1.8, 2.3, 2.3, 2.9, 2.0, 2.9, 3.2, 3.1, 2.9, 3.1, 2.4, 2.8, 2.9, 1.8, 1.7, 3.3, 3.1, 2.9, 2.6, 2.3, 2.2, 2.6, 2.4, 2.6, 2.1, 1.6, 1.9, 2.0, 2.7, 3.3, 3.2, 3.1, 3.1, 2.8, 2.6, 2.8, 2.4, 2.8, 2.8, 2.8, 2.4, 2.2, 2.3, 1.8, 2.2, 2.7, 2.7, 2.8, 2.7, 2.2, 2.0, 2.1, 2.3, 1.8, 2.3, 2.6, 2.4, 2.4, 1.8, 2.5, 1.8, 1.5, 1.6, 1.3, 1.6, 2.1, 1.5, 1.0, 0.8, 0.8, 1.0, 1.3, 0.8, 0.8, 1.2, 1.1, 0.8, 1.2, 2.2, 1.6, 1.9, 0.8, 1.2, 1.2, 1.1, 1.2, 1.2, 1.2, 1.2, 1.9, 1.4, 1.5, 1.4, 2.1, 1.6, 1.5, 1.7, 1.7, 1.7, 1.4, 0.7, 0.9, 1.5, 0.7, 1.1, 1.0, 0.9, 1.0, 1.2, 1.2, 1.5, 1.2, 1.2, 1.8, 1.4, 1.5, 1.2, 1.8, 1.5, 1.3, 1.7, 1.7, 1.6, 1.2, 1.9, 1.9, 1.6, 1.1, 1.5, 1.5, 1.1, 1.6, 2.1, 2.6, 2.9, 1.9, 2.4, 2.1, 2.4, 1.6, 3.3, 3.3, 3.4, 2.9, 2.6, 1.7, 1.3, 1.4, 3.1, 2.6, 1.7, 1.5, 1.8, 1.3, 0.8, 1.2, 1.8, 1.2, 1.4, 2.1, 2.1, 1.9, 1.1, 1.3, 2.0, 1.7, 2.0, 1.9, 1.5, 2.8, 2.9, 2.1, 2.0, 2.7, 1.9, 1.7, 1.4, 1.9, 1.7, 2.0, 1.6, 1.0, 1.9, 1.8, 2.2, 2.5, 2.5, 2.4, 1.2, 1.2, 1.5, 2.0, 2.0, 2.2, 2.4, 1.9, 1.8, 1.5, 2.3, 1.7, 2.1, 1.7, 1.9, 1.4, 1.3, 1.3, 1.4, 1.3, 1.8, 1.2, 1.9, 1.2, 1.5, 2.1, 1.6, 2.1, 2.3, 2.0, 2.2, 3.0, 2.7, 2.1, 2.8, 3.6, 3.1, 2.7, 2.7, 3.5, 2.5, 2.3, 2.5, 2.4, 2.2, 2.5, 2.4, 2.0, 1.4, 2.4, 2.0, 1.9, 1.2, 1.5, 1.2, 0.9, 1.2, 1.6, 1.6, 1.3, 1.4, 0.5, 0.7, 0.9, 1.6, 1.3, 1.2, 1.3, 1.0, 1.3, 1.2, 0.6, 1.1, 0.7, 1.1, 1.3, 1.4, 0.5, 1.6, 0.9, 1.2, 0.5, 1.3, 1.0, 0.6, 0.7, 1.1, 1.4, 1.2, 1.4, 1.1, 0.0, 0.4, 1.2, 0.9, 0.4, 1.1, 0.8, 0.4, 0.9, 0.6, 0.5, 1.0, 0.8, 0.8, 0.6, 0.7, 0.8, 0.3, 1.0, 0.4, 0.4, 0.3, 0.7, 0.3, 0.7, 0.4, 0.7, 0.9, 0.6, 0.5, 1.1, 0.8, 1.0, 0.8, 0.6, 0.8, 0.7, 0.8, 1.2, 0.7, 0.9, 1.1, 0.9, 1.2, 1.1, 1.6, 1.5, 0.9, 0.7, 1.0, 1.5, 0.8, 1.1, 1.0, 0.9, 0.9, 0.6, 0.8, 0.6, 1.0, 1.2, 1.2, 1.0, 0.4, 0.7, 0.8, 1.2, 1.1, 1.6, 1.2, 1.0, 1.2, 0.7, 1.7, 1.6, 1.9, 1.2, 1.8, 0.9, 1.6, 0.8, 0.8, 0.9, 0.9, 1.1, 1.2, 1.2, 1.2, 1.2, 1.0, 1.9, 1.5, 2.1, 1.5, 1.2, 1.2, 0.6, 1.1, 1.1, 1.3, 2.0, 2.1, 1.2, 1.0, 1.1, 0.7, 0.1, 0.7, 0.5, 0.8, 1.1, 0.9, 1.2, 1.2, 1.9, 1.1, 1.2, 1.2, 0.7, 0.5, 1.3, 0.8, 0.7, 1.0, 0.8, 0.9, 0.9, 0.5, 0.7, 1.0, 0.6, 0.8, 1.1, 0.9, 1.2, 0.6, 0.8, 0.8, 1.1, 1.3, 1.2, 0.7, 0.8, 0.5, 0.6, 0.6, 0.7, 1.2, 0.7, 1.4, 1.3, 1.4, 1.0, 0.8, 0.6, 0.7, 0.7, 0.6, 0.6, 0.7, 0.8, 1.0, 1.0, 0.2, 0.9, 0.5, 0.6, 0.5, 0.4, 1.0, 1.0, 1.4, 1.0, 1.1, 0.7, 0.5, 0.8, 1.2, 0.3, 0.7, 1.4, 0.4, 1.2, 0.3, 0.6, 0.2, 0.4, 0.4, 1.1, 1.5, 1.0, 0.2, 0.8, 1.1, 1.8, 2.2, 0.7, 0.7, 0.7, 0.4, 0.5, 0.6, 1.1, 1.0, 1.1, 1.4, 0.4, 0.5, 0.4, 0.3, 0.5, 0.7, 1.1, 0.9, 1.2, 0.5, 0.6, 0.6, 0.8, 0.6, 0.7, 1.3, 1.0, 0.7, 0.4, 0.4, 0.8, 0.3, 0.8, 0.9, 0.6, 0.4, 0.7, 0.9, 1.3, 1.1, 1.7, 1.6, 1.3, 1.2, 0.6, 1.8, 1.3, 1.4, 0.9, 1.3, 0.9, 1.3, 1.2, 1.2, 1.1, 0.6, 0.5, 0.7, 0.5, 0.2, 0.6, 0.4, 0.3, 0.8, 0.8, 0.7, 0.5, 0.8, 0.3, 0.2, 0.3, 0.6, 0.4, 0.6, 0.5, 0.7, 0.7, 1.5, 1.6, 1.3, 1.9, 1.5, 1.9, 1.6, 2.1, 2.4, 2.4, 2.3, 3.2, 3.6, 3.0, 3.1, 2.8, 2.8, 3.0, 3.5, 2.6, 3.1, 1.9, 2.6, 1.5, 1.2, 1.4, 1.2, 1.3, 1.2, 0.9, 0.5, 0.9, 1.0, 0.3, 0.4, 0.2, 0.6, 1.4, 1.3, 1.1, 1.5, 0.8, 1.1, 0.9, 0.8, 1.1, 1.3, 0.7, 0.9, 0.7, 0.4, 0.5, 1.2, 0.9, 0.9, 1.3, 0.9, 0.5, 0.5, 0.4, 0.7, 0.4, 0.6, 0.4, 0.6, 0.4, 0.5, 0.6, 1.3, 1.4, 1.0, 0.2, 0.2, 0.8, 0.8, 0.0, 0.0, 0.5, 0.3, 0.5, 0.7, 0.4, 1.0, 1.2, 0.4, 0.4, 0.5, 0.4, 0.8, 0.4, 0.1, 0.6, 0.1, 0.5, 0.5, 0.6, 1.1, 0.5, 0.6, 0.5, 0.6, 0.3, 0.8, 0.4, 0.7, 0.8, 0.8, 1.8, 1.5, 1.0, 1.0, 0.7, 0.8, 1.0, 0.9, 1.3, 1.3, 1.2, 1.1, 0.6, 0.9, 0.9, 0.9, 0.7, 0.7, 0.9, 0.4, 0.2, 0.4, 0.2, 0.2, 0.3, 1.3, 0.9, 0.8, 0.9, 1.3, 1.2, 1.8, 1.7, 1.8, 1.5, 1.8, 1.4, 2.0, 1.7, 1.8, 1.6, 1.4, 0.6, 1.3]


def speed_labels(bins, units):
    """
    Generates labels for windspeed bins

    Input
    ----------
    bins: Windspeed bins
    units: = Unit
    """
    labels = []
    for left, right in zip(bins[:-1], bins[1:]):
        if left == bins[0]:
            labels.append('calm'.format(right))
        elif np.isinf(right):
            labels.append('>{} {}'.format(left, units))
        else:
            labels.append('{} - {} {}'.format(left, right, units))

    return list(labels)

# =============================================================================
# def convert_dir(directions, N=None):
#     """
#     Generates labels for winddirection bins
#
#     Input
#     ----------
#     bins: Winddirection bins
#
#     Parameters:
#     ----------
#     N = None
#     """
#     if N is None:
#         N = directions.shape[0]
#     barDir = directions * np.pi/180. - np.pi/N
#     barWidth = 2 * np.pi / N
#     return barDir, barWidth
# =============================================================================


def plot_windrose(dd, ff, wndspd_units='m/s', spd_bins=None):
    """
    Plots Windrose with bokeh

    Input
    ----------
    dd:         Winddirection
    ff:         Windspeed

    Parameters:
    ----------
    wndspd_units = 'm/s'
    spd_bins = None         Categories for windspeed - should end with np.inf

    """

    # -------------------------------------------------------------------------
    #  preparing data
    # -------------------------------------------------------------------------
    if spd_bins is None:
        spd_bins = [-1, 0, 1, 2, 3, 5, 7, 10, np.inf]  # get speed bins ______________ verbessern für km/h

    # get categorizations for speed & direction
    spd_labels = speed_labels(spd_bins, wndspd_units)  # get speed labels
    dir_bins = np.arange(-7.5, 370, 15)  # get wind directory categories
    dir_labelsf = (dir_bins[:-1] + dir_bins[1:]) / 2  # labels for directions
    dir_labels = dir_labelsf.astype(int)  # get rid of the commas for labels
    dir_labels = dir_labels.astype(str)  # convert into string

    # categorize data
    WindSpd_bins = pd.cut(ff, bins=spd_bins, labels=spd_labels, right=True)
    WindDir_bins = pd.cut(dd, bins=dir_bins, labels=dir_labels, right=False)
    # get frequency table
    tab = pd.crosstab(WindDir_bins, WindSpd_bins, dropna=False)

    # -------------------------------------------------------------------------
    # setting things up for plot
    # -------------------------------------------------------------------------

    width = 800
    height = 800
#    inner_radius = 0
#    outer_radius = 300 - 10
    palette = palettes.brewer['Spectral'][len(spd_bins)]  # color palette

    p = figure(plot_width=width,
               plot_height=height,
               title="Windrose",
               x_axis_type=None,
               y_axis_type=None,
               tools="pan,wheel_zoom,save,reset")

    # -------------------------------------------------------------------------
    # plot wind data
    # -------------------------------------------------------------------------

    for i in range(len(dir_bins)-1):  # last angle not needed
        # loop over each angle to get starting & ending angle for wedges
        # -90 because coordinate system starts from horizontal
        startangle = -radians(dir_bins[i+1] - 90)
        endangle = -radians(dir_bins[i] - 90)
        # reset of those two after each angle:
        spdcnt = 0  # counter for windspeed frequencies
        palcnt = 0  # counter for colorpalette

        for wndspd in tab.loc[dir_labels[i]]:
            # loop over each windspeed
            tmpcnt = spdcnt + wndspd  # temporary variables for size of slices
            p.annular_wedge(0, 0,  # starting coordinates
                            spdcnt,  # inner radius for slice
                            tmpcnt,  # outer radius for slice
                            startangle, endangle,  # angles for wedges
                            legend=WindSpd_bins.categories[palcnt],  # legend
                            fill_color=palette[palcnt],  # fill with color
                            line_color=None,
                            direction="anticlock"
                            )
            spdcnt = tmpcnt
            palcnt += 1

    # -------------------------------------------------------------------------
    # setting up "coordinate system" for "polar plot"
    # -------------------------------------------------------------------------

    # set up angles and labels for cardinal points of "coordinate system"
    ind = ['N', 'NO', 'O', 'SO', 'S', 'SW', 'W', 'NW', 'N']
    angles_deg = pd.Series(np.linspace(0, 360, 9), index=ind)
    # get size of scaling rings
    max_cls = max(tab.sum(axis=1))
    # get radii of the inner rings for "coordinate system"
    radii = np.linspace(0, max_cls, num=6)
    radii = radii.round()
    # coordinates for ring-labels
    half_angle = radians(angles_deg[1]/2)  # needed for text skewness too
    xr = radii[1:]*np.cos(np.array(radians(45) + half_angle))
    yr = radii[1:]*np.sin(np.array(radians(45) + half_angle))
    radii = radii.astype(int)
    radii = radii.astype(str)
    maxrad = int(radii[-1])  # noch besser machen ___________________________________

    # -------------------------------------------------------------------------
    # plotting up "coordinate system"
    # -------------------------------------------------------------------------

    # radius lines for frequency
    p.circle(0, 0, radius=radii, fill_color=None, line_color="grey")
    # text for frequency
    p.text(xr, yr, [str(r) for r in radii[1:]],
           angle=-half_angle,
           text_font_size="10pt",
           text_align="center",
           text_color="grey")

    # circular axes
    p.annular_wedge(0, 0, 0, maxrad + maxrad / 30,
                    angles_deg, angles_deg, color="grey",
                    end_angle_units="deg", start_angle_units="deg")

    # orientation text
    # doesn't work with simple "radians" - has to be np.radians - why ever...
    txr = (maxrad + maxrad / 10) * np.sin(np.radians(angles_deg))
    tyr = (maxrad + maxrad / 10) * np.cos(np.radians(angles_deg))
    p.text(txr.values[0:-1], tyr.values[0:-1], ind[0:-1],
           color="grey", text_align="center")

    # adapt plotsize
    p.x_range = Range1d((-max_cls - max_cls / 4), (max_cls + max_cls / 4))
    p.y_range = Range1d((-max_cls - max_cls / 4), (max_cls + max_cls / 4))

    output_file("plot.html")
    show(p)


if __name__ == '__main__':
    plot_windrose(dd, ff)
